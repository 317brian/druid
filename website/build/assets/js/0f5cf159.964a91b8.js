"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[4517],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>c});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),m=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=m(e.components);return a.createElement(s.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},k=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),d=m(n),k=r,c=d["".concat(s,".").concat(k)]||d[k]||p[k]||i;return n?a.createElement(c,l(l({ref:t},u),{},{components:n})):a.createElement(c,l({ref:t},u))}));function c(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=k;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[d]="string"==typeof e?e:r,l[1]=o;for(var m=2;m<i;m++)l[m]=n[m];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}k.displayName="MDXCreateElement"},1212:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>s,default:()=>k,frontMatter:()=>o,metadata:()=>m,toc:()=>d});var a=n(7462),r=n(3366),i=(n(7294),n(3905)),l=["components"],o={id:"reference",title:"SQL-based ingestion reference",sidebar_label:"Reference"},s=void 0,m={unversionedId:"multi-stage-query/reference",id:"multi-stage-query/reference",title:"SQL-based ingestion reference",description:"\x3c!--",source:"@site/../docs/multi-stage-query/reference.md",sourceDirName:"multi-stage-query",slug:"/multi-stage-query/reference",permalink:"/docs/multi-stage-query/reference",draft:!1,editUrl:"https://github.com/apache/druid/edit/master/docs/../docs/multi-stage-query/reference.md",tags:[],version:"current",lastUpdatedBy:"Rohan Garg",lastUpdatedAt:1674502323,formattedLastUpdatedAt:"Jan 23, 2023",frontMatter:{id:"reference",title:"SQL-based ingestion reference",sidebar_label:"Reference"},sidebar:"docs",previous:{title:"Examples",permalink:"/docs/multi-stage-query/examples"},next:{title:"Known issues",permalink:"/docs/multi-stage-query/known-issues"}},u={},d=[{value:"SQL reference",id:"sql-reference",level:2},{value:"<code>EXTERN</code> Function",id:"extern-function",level:3},{value:"<code>HTTP</code>, <code>INLINE</code>, <code>LOCALFILES</code> and <code>S3</code> Functions",id:"http-inline-localfiles-and-s3-functions",level:3},{value:"Function Arguments",id:"function-arguments",level:4},{value:"<code>HTTP</code> Function",id:"http-function",level:4},{value:"<code>INLINE</code> Function",id:"inline-function",level:4},{value:"<code>LOCALFILES</code> Function",id:"localfiles-function",level:4},{value:"<code>S3</code> Function",id:"s3-function",level:4},{value:"Input Format",id:"input-format",level:4},{value:"CSV Format",id:"csv-format",level:4},{value:"Delimited Text Format",id:"delimited-text-format",level:4},{value:"JSON Format",id:"json-format",level:4},{value:"Parameters",id:"parameters",level:3},{value:"<code>INSERT</code>",id:"insert",level:3},{value:"<code>REPLACE</code>",id:"replace",level:3},{value:"<code>REPLACE</code> all data",id:"replace-all-data",level:4},{value:"<code>REPLACE</code> specific time ranges",id:"replace-specific-time-ranges",level:4},{value:"<code>PARTITIONED BY</code>",id:"partitioned-by",level:3},{value:"<code>CLUSTERED BY</code>",id:"clustered-by",level:3},{value:"Context parameters",id:"context-parameters",level:2},{value:"Sketch Merging Mode",id:"sketch-merging-mode",level:2},{value:"Durable Storage",id:"durable-storage",level:2},{value:"Limits",id:"limits",level:2},{value:"Error codes",id:"error-codes",level:2}],p={toc:d};function k(e){var t=e.components,n=(0,r.Z)(e,l);return(0,i.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"This page describes SQL-based batch ingestion using the ",(0,i.kt)("a",{parentName:"p",href:"/docs/multi-stage-query/"},(0,i.kt)("inlineCode",{parentName:"a"},"druid-multi-stage-query")),"\nextension, new in Druid 24.0. Refer to the ",(0,i.kt)("a",{parentName:"p",href:"/docs/ingestion/#batch"},"ingestion methods")," table to determine which\ningestion method is right for you.")),(0,i.kt)("h2",{id:"sql-reference"},"SQL reference"),(0,i.kt)("p",null,"This topic is a reference guide for the multi-stage query architecture in Apache Druid. For examples of real-world\nusage, refer to the ",(0,i.kt)("a",{parentName:"p",href:"/docs/multi-stage-query/examples"},"Examples")," page."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"INSERT")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"REPLACE")," load data into a Druid datasource from either an external input source, or from another\ndatasource. When loading from an external datasource, you typically must provide the kind of input source,\nthe data format, and the schema (signature) of the input file. Druid provides ",(0,i.kt)("em",{parentName:"p"},"table functions")," to allow you to\nspecify the external file. There are two kinds. ",(0,i.kt)("inlineCode",{parentName:"p"},"EXTERN")," works with the JSON-serialized specs for the three\nitems, using the same JSON you would use in native ingest. A set of other, input-source-specific functions\nuse SQL syntax to specify the format and the input schema. There is one function for each input source. The\ninput-source-specific functions allow you to use SQL query parameters to specify the set of files (or URIs),\nmaking it easy to reuse the same SQL statement for each ingest: just specify the set of files to use each time."),(0,i.kt)("h3",{id:"extern-function"},(0,i.kt)("inlineCode",{parentName:"h3"},"EXTERN")," Function"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"EXTERN")," function to read external data. The function has two variations."),(0,i.kt)("p",null,"Function variation 1, with the input schema expressed as JSON:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT\n <column>\nFROM TABLE(\n  EXTERN(\n    '<Druid input source>',\n    '<Druid input format>',\n    '<row signature>'\n  )\n)\n")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"EXTERN")," consists of the following parts:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Any ",(0,i.kt)("a",{parentName:"li",href:"/docs/ingestion/native-batch-input-sources"},"Druid input source")," as a JSON-encoded string."),(0,i.kt)("li",{parentName:"ol"},"Any ",(0,i.kt)("a",{parentName:"li",href:"/docs/ingestion/data-formats"},"Druid input format")," as a JSON-encoded string."),(0,i.kt)("li",{parentName:"ol"},"A row signature, as a JSON-encoded array of column descriptors. Each column descriptor must have a\n",(0,i.kt)("inlineCode",{parentName:"li"},"name")," and a ",(0,i.kt)("inlineCode",{parentName:"li"},"type"),". The type can be ",(0,i.kt)("inlineCode",{parentName:"li"},"string"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"long"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"double"),", or ",(0,i.kt)("inlineCode",{parentName:"li"},"float"),". This row signature is\nused to map the external data into the SQL layer.")),(0,i.kt)("p",null,"Variation 2, with the input schema expressed in SQL using an ",(0,i.kt)("inlineCode",{parentName:"p"},"EXTEND")," clause. (See the next\nsection for more detail on ",(0,i.kt)("inlineCode",{parentName:"p"},"EXTEND"),"). This format also uses named arguments to make the\nSQL a bit easier to read:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT\n <column>\nFROM TABLE(\n  EXTERN(\n    inputSource => '<Druid input source>',\n    inputFormat => '<Druid input format>'\n  ) (<columns>)\n)\n")),(0,i.kt)("p",null,"The input source and format are as above. The columns are expressed as in a SQL ",(0,i.kt)("inlineCode",{parentName:"p"},"CREATE TABLE"),".\nExample: ",(0,i.kt)("inlineCode",{parentName:"p"},"(timestamp VARCHAR, metricType VARCHAR, value BIGINT)"),". The optional ",(0,i.kt)("inlineCode",{parentName:"p"},"EXTEND")," keyword\ncan precede the column list: ",(0,i.kt)("inlineCode",{parentName:"p"},"EXTEND (timestamp VARCHAR...)"),"."),(0,i.kt)("p",null,"For more information, see ",(0,i.kt)("a",{parentName:"p",href:"/docs/multi-stage-query/concepts#extern"},"Read external data with EXTERN"),"."),(0,i.kt)("h3",{id:"http-inline-localfiles-and-s3-functions"},(0,i.kt)("inlineCode",{parentName:"h3"},"HTTP"),", ",(0,i.kt)("inlineCode",{parentName:"h3"},"INLINE"),", ",(0,i.kt)("inlineCode",{parentName:"h3"},"LOCALFILES")," and ",(0,i.kt)("inlineCode",{parentName:"h3"},"S3")," Functions"),(0,i.kt)("p",null,"While ",(0,i.kt)("inlineCode",{parentName:"p"},"EXTERN")," allows you to specify an external table using JSON, other table functions allow you\ndescribe the external table using SQL syntax. Each function works for one specific kind of input\nsource. You provide properties using SQL named arguments. The row signature is given using the\nDruid SQL ",(0,i.kt)("inlineCode",{parentName:"p"},"EXTEND")," keyword using SQL syntax and types."),(0,i.kt)("p",null,"The set of table functions and formats is preliminary in this release."),(0,i.kt)("p",null,"Function format:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT\n <column>\nFROM TABLE(\n  http(\n    userName => 'bob',\n    password => 'secret',\n    uris => ARRAY['http:example.com/foo.csv', 'http:example.com/bar.csv'],\n    format => 'csv'\n    )\n  ) EXTEND (x VARCHAR, y VARCHAR, z BIGINT)\n")),(0,i.kt)("p",null,"For each function, you provide:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The function name indicates the kind of input source: ",(0,i.kt)("inlineCode",{parentName:"li"},"http"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"inline")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"localfiles"),"."),(0,i.kt)("li",{parentName:"ul"},"The function arguments correspond to a subset of the JSON fields for that input source."),(0,i.kt)("li",{parentName:"ul"},"A ",(0,i.kt)("inlineCode",{parentName:"li"},"format")," argument to indicate the desired input format."),(0,i.kt)("li",{parentName:"ul"},"Additional arguments required for the selected format type.")),(0,i.kt)("p",null,"Note that the ",(0,i.kt)("inlineCode",{parentName:"p"},"EXTEND")," keyword is optional. The following is equally valid (and perhaps\nmore convenient):"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT\n <column>\nFROM TABLE(\n  http(\n    userName => 'bob',\n    password => 'secret',\n    uris => ARRAY['http:example.com/foo.csv', 'http:example.com/bar.csv'],\n    format => 'csv'\n    )\n  ) (x VARCHAR, y VARCHAR, z BIGINT)\n")),(0,i.kt)("h4",{id:"function-arguments"},"Function Arguments"),(0,i.kt)("p",null,"These table functions are intended for use with the SQL by-name argument syntax\nas shown above. Because the functions include all parameters for all formats,\nusing positional calls is both cumbersome and error-prone."),(0,i.kt)("p",null,"Function argument names are generally the same as the JSON field names, except\nas noted below. Each argument has a SQL type which matches the JSON type. For\narguments that take a string list in JSON, use the SQL ",(0,i.kt)("inlineCode",{parentName:"p"},"ARRAY[...]")," syntax in\nSQL as shown in the above example."),(0,i.kt)("p",null,"Array parameters are good candidates for use in parameterized queries. That is:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT\n <column>\nFROM TABLE(\n  http(\n    userName => 'bob',\n    password => 'secret',\n    uris => ?,\n    format => 'csv'\n    )\n  ) (x VARCHAR, y VARCHAR, z BIGINT)\n")),(0,i.kt)("p",null,"Provide the list of URIs (in this case) as a query parameter in each ingest. Doing\nso is simpler than writing a script to insert the array into the SQL text."),(0,i.kt)("h4",{id:"http-function"},(0,i.kt)("inlineCode",{parentName:"h4"},"HTTP")," Function"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"HTTP")," table function represents the\n",(0,i.kt)("a",{parentName:"p",href:"/docs/ingestion/native-batch-input-sources#http-input-source"},"HTTP input source"),"\nto read from an HTTP server. The function accepts the following arguments:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"userName")," (",(0,i.kt)("inlineCode",{parentName:"li"},"VARCHAR"),") -  Same as JSON ",(0,i.kt)("inlineCode",{parentName:"li"},"httpAuthenticationUsername"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"password"),"  (",(0,i.kt)("inlineCode",{parentName:"li"},"VARCHAR"),") - Same as",(0,i.kt)("inlineCode",{parentName:"li"},"httpAuthenticationPassword")," when used with the default option."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"passwordEnvVar")," (",(0,i.kt)("inlineCode",{parentName:"li"},"VARCHAR"),") - Same as the HTTP ",(0,i.kt)("inlineCode",{parentName:"li"},"httpAuthenticationPassword")," when used with\nthe ",(0,i.kt)("inlineCode",{parentName:"li"},'"type": "environment"')," option."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"uris")," (",(0,i.kt)("inlineCode",{parentName:"li"},"ARRAY")," of ",(0,i.kt)("inlineCode",{parentName:"li"},"VARCHAR"),")")),(0,i.kt)("h4",{id:"inline-function"},(0,i.kt)("inlineCode",{parentName:"h4"},"INLINE")," Function"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"INLINE")," table function represents the\n",(0,i.kt)("a",{parentName:"p",href:"/docs/ingestion/native-batch-input-sources#inline-input-source"},"Inline input source"),"\nwhich provides data directly in the table function. Parameter:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"data")," (",(0,i.kt)("inlineCode",{parentName:"li"},"ARRAY")," of ",(0,i.kt)("inlineCode",{parentName:"li"},"VARCHAR"),") - Data lines, without a trailing newline, as an array.")),(0,i.kt)("p",null,"Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT ...\nFROM TABLE(\n  inline(\n    data => ARRAY[\n        'a,b',\n        'c,d'],\n    format => 'csv'\n    )\n  ) (x VARCHAR, y VARCHAR)\n")),(0,i.kt)("h4",{id:"localfiles-function"},(0,i.kt)("inlineCode",{parentName:"h4"},"LOCALFILES")," Function"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"LOCALFILES")," table function represents the\n",(0,i.kt)("a",{parentName:"p",href:"/docs/ingestion/native-batch-input-sources#local-input-source"},"Local input source")," which reads\nfiles from the file system of the node running Druid. This is most useful for single-node\ninstallations. The function accepts the following parameters:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"baseDir")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"filter")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"files"))),(0,i.kt)("p",null,"When the local files input source is used directly in an ",(0,i.kt)("inlineCode",{parentName:"p"},"extern")," function, or ingestion spec, you\ncan provide either ",(0,i.kt)("inlineCode",{parentName:"p"},"baseDir")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"filter")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"files")," but not both. This function, however, allows\nyou to provide any of the following combinations:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"baseDir")," - Matches all files in the given directory. (Assumes the filter is ",(0,i.kt)("inlineCode",{parentName:"li"},"*"),".)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"baseDir")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"filter")," - Match files in the given directory using the filter."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"baseDir")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"files")," - A set of files relative to ",(0,i.kt)("inlineCode",{parentName:"li"},"baseDir"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"files")," - The files should be absolute paths, else they will be computed relative to Druid's\nworking directory (usually the Druid install directory.)")),(0,i.kt)("p",null,"Examples:"),(0,i.kt)("p",null,"To read All files in /tmp, which must be CSV files:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT ...\nFROM TABLE(\n  localfiles(\n      baseDir => '/tmp',\n      format => 'csv')\n  ) (x VARCHAR, y VARCHAR)\n")),(0,i.kt)("p",null,"Some additional variations (omitting the common bits):"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"  -- CSV files in /tmp\n  localfiles(baseDir => '/tmp',\n             filter => '*.csv',\n             format => 'csv')\n\n  -- /tmp/a.csv and /tmp/b.csv\n  localfiles(baseDir => '/tmp',\n             files => ARRAY['a.csv', 'b.csv'],\n             format => 'csv')\n\n  -- /tmp/a.csv and /tmp/b.csv\n  localfiles(files => ARRAY['/tmp/a.csv', '/tmp/b.csv'],\n             format => 'csv')\n")),(0,i.kt)("h4",{id:"s3-function"},(0,i.kt)("inlineCode",{parentName:"h4"},"S3")," Function"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"S3")," table function represents the\n",(0,i.kt)("a",{parentName:"p",href:"/docs/ingestion/native-batch-input-sources#s3-input-source"},"S3 input source")," which reads\nfiles from an S3 bucket. The function accepts the following parameters to specify the\nobjects to read:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"uris")," (",(0,i.kt)("inlineCode",{parentName:"li"},"ARRAY")," of ",(0,i.kt)("inlineCode",{parentName:"li"},"VARCHAR"),")"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"prefix")," (",(0,i.kt)("inlineCode",{parentName:"li"},"VARCHAR"),") - Corresponds to the JSON ",(0,i.kt)("inlineCode",{parentName:"li"},"prefixes")," property, but allows a single\nprefix."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"bucket")," (",(0,i.kt)("inlineCode",{parentName:"li"},"VARCHAR"),") - Corresponds to the ",(0,i.kt)("inlineCode",{parentName:"li"},"bucket")," field of the ",(0,i.kt)("inlineCode",{parentName:"li"},"objects")," JSON field. SQL\ndoes not have syntax for an array of objects. Instead, this function takes a single bucket,\nand one or more objects within that bucket."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"paths")," (",(0,i.kt)("inlineCode",{parentName:"li"},"ARRAY")," of ",(0,i.kt)("inlineCode",{parentName:"li"},"VARCHAR"),") - Corresponds to the ",(0,i.kt)("inlineCode",{parentName:"li"},"path")," fields of the ",(0,i.kt)("inlineCode",{parentName:"li"},"object")," JSON field.\nAll paths are within the single ",(0,i.kt)("inlineCode",{parentName:"li"},"bucket")," parameter.")),(0,i.kt)("p",null,"The S3 input source accepts one of the following patterns:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"uris")," - A list of fully-qualified object URIs."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"prefixes"),' - A list of fully-qualified "folder" prefixes.'),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"bucket")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"paths")," - A list of objects relative to the given bucket path.")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"S3")," function also accepts the following security parameters:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"accessKeyId")," (",(0,i.kt)("inlineCode",{parentName:"li"},"VARCHAR"),")"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"secretAccessKey")," (",(0,i.kt)("inlineCode",{parentName:"li"},"VARCHAR"),")"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"assumeRoleArn")," (",(0,i.kt)("inlineCode",{parentName:"li"},"VARCHAR"),")")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"S3")," table function does not support either the ",(0,i.kt)("inlineCode",{parentName:"p"},"clientConfig")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"proxyConfig"),"\nJSON properties."),(0,i.kt)("p",null,"If you need the full power of the S3 input source, then consider the use of the ",(0,i.kt)("inlineCode",{parentName:"p"},"extern"),"\nfunction, which accepts the full S3 input source serialized as JSON. Alternatively,\ncreate a catalog external table that has the full set of properties, leaving just the\n",(0,i.kt)("inlineCode",{parentName:"p"},"uris")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"paths")," to be provided at query time."),(0,i.kt)("p",null,"Examples, each of which correspond to an example on the\n",(0,i.kt)("a",{parentName:"p",href:"/docs/ingestion/native-batch-input-sources#s3-input-source"},"S3 input source")," page.\nThe examples omit the format and schema; however you must remember to provide those\nin an actual query."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT ...\nFROM TABLE(S3(\n    uris => ARRAY['s3://foo/bar/file.json', 's3://bar/foo/file2.json'],\n    format => 'csv'))\n  ) (x VARCHAR, y VARCHAR)\n")),(0,i.kt)("p",null,"Additional variations, omitting the common bits:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"  S3(prefixes => ARRAY['s3://foo/bar/', 's3://bar/foo/']))\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"  -- Not an exact match for the JSON example: the S3 function allows\n  -- only one bucket.\n  S3(bucket => 's3://foo`,\n           paths => ARRAY['bar/file1.json', 'foo/file2.json'])\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"  S3(uris => ARRAY['s3://foo/bar/file.json', 's3://bar/foo/file2.json'],\n           accessKeyId => 'KLJ78979SDFdS2',\n           secretAccessKey => 'KLS89s98sKJHKJKJH8721lljkd')\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"  S3(uris => ARRAY['s3://foo/bar/file.json', 's3://bar/foo/file2.json'],\n           accessKeyId => 'KLJ78979SDFdS2',\n           secretAccessKey => 'KLS89s98sKJHKJKJH8721lljkd',\n           assumeRoleArn => 'arn:aws:iam::2981002874992:role/role-s3')\n")),(0,i.kt)("h4",{id:"input-format"},"Input Format"),(0,i.kt)("p",null,"Each of the table functions above requires that you specify a format using the ",(0,i.kt)("inlineCode",{parentName:"p"},"format"),"\nparameter which accepts a value the same as the format names used for ",(0,i.kt)("inlineCode",{parentName:"p"},"EXTERN")," and described\nfor ",(0,i.kt)("a",{parentName:"p",href:"/docs/ingestion/native-batch-input-sources"},"each input source"),"."),(0,i.kt)("h4",{id:"csv-format"},"CSV Format"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"csv")," format selects the ",(0,i.kt)("a",{parentName:"p",href:"/docs/ingestion/data-formats#csv"},"CSV input format"),".\nParameters:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"listDelimiter")," (",(0,i.kt)("inlineCode",{parentName:"li"},"VARCHAR"),")"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"skipHeaderRows")," (",(0,i.kt)("inlineCode",{parentName:"li"},"BOOLEAN"),")")),(0,i.kt)("p",null,"Example for a CSV format with a list delimiter and where we want to skip the first\ninput row:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT ...\nFROM TABLE(\n  inline(\n    data => ARRAY[\n        'skip me',\n        'a;foo,b',\n        'c;bar,d'],\n    format => 'csv',\n    listDelimiter => ';',\n    skipHeaderRows => 1\n    )\n  ) (x VARCHAR, y VARCHAR)\n")),(0,i.kt)("h4",{id:"delimited-text-format"},"Delimited Text Format"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"tsv")," format selects the ",(0,i.kt)("a",{parentName:"p",href:"/docs/ingestion/data-formats#tsv-delimited"},"TSV (Delimited) input format"),".\nParameters:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"delimiter")," (",(0,i.kt)("inlineCode",{parentName:"li"},"VARCHAR"),")"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"listDelimiter")," (",(0,i.kt)("inlineCode",{parentName:"li"},"VARCHAR"),")"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"skipHeaderRows")," (",(0,i.kt)("inlineCode",{parentName:"li"},"BOOLEAN"),")")),(0,i.kt)("p",null,"Example for a pipe-separated format with a list delimiter and where we want to skip the first\ninput row:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT ...\nFROM TABLE(\n  inline(\n    data => ARRAY[\n        'skip me',\n        'a;foo|b',\n        'c;bar|d'],\n    format => 'tsv',\n    listDelimiter => ';',\n    skipHeaderRows => 1,\n    delimiter => '|'\n    )\n  ) (x VARCHAR, y VARCHAR)\n")),(0,i.kt)("h4",{id:"json-format"},"JSON Format"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"json")," format selects the\n",(0,i.kt)("a",{parentName:"p",href:"../ingestion/data-formats.html#json"},"JSON input format"),".\nThe JSON format accepts no additional parameters."),(0,i.kt)("p",null,"Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT ...\nFROM TABLE(\n  inline(\n    data => ARRAY[\'{"x": "foo", "y": "bar"}\'],\n    format => \'json\')\n  ) (x VARCHAR, y VARCHAR)\n')),(0,i.kt)("h3",{id:"parameters"},"Parameters"),(0,i.kt)("p",null,"Starting with the Druid 26.0 release, you can use query parameters with MSQ queries. You may find\nthat you periodically ingest a new set of files into Druid. Often, the bulk of the query is identical\nfor each ingestion: only the list of files (or URIs or objects) changes. For example, for the ",(0,i.kt)("inlineCode",{parentName:"p"},"S3"),"\ninput source, you will likely ingest from the same bucket and security setup in\neach query; only the specific objects will change. Consider using a query parameter\nto pass the object names:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"INSERT INTO ...\nSELECT ...\nFROM TABLE(S3(bucket => 's3://foo`,\n              accessKeyId => ?,\n              paths => ?,\n              format => JSON))\n     (a VARCHAR, b BIGINT, ...)\n")),(0,i.kt)("p",null,"This same technique can be used with the ",(0,i.kt)("inlineCode",{parentName:"p"},"uris")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"prefixes")," parameters instead."),(0,i.kt)("p",null,"Function arguments that take an array parameter require an array function in your JSON request.\nFor example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "query" : "INSERT INTO ...\nSELECT ...\nFROM TABLE(S3(bucket => \'s3://foo`,\n              accessKeyId => ?,\n              paths => ?,\n              format => JSON))\n     (a VARCHAR, b BIGINT, ...)",\n  "parameters": [\n    { "type": "VARCHAR", "value": "ABCD-EF01"},\n    { "type": "VARCHAR", "value": [\n        "foo.csv", "bar.csv"\n    ] }\n  ]\n}\n')),(0,i.kt)("p",null,"The type in the above example is the type of each element. It must be ",(0,i.kt)("inlineCode",{parentName:"p"},"VARCHAR")," for all the array\nparameters for functions described on this page."),(0,i.kt)("h3",{id:"insert"},(0,i.kt)("inlineCode",{parentName:"h3"},"INSERT")),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"INSERT")," statement to insert data."),(0,i.kt)("p",null,"Unlike standard SQL, ",(0,i.kt)("inlineCode",{parentName:"p"},"INSERT")," loads data into the target table according to column name, not positionally. If necessary,\nuse ",(0,i.kt)("inlineCode",{parentName:"p"},"AS")," in your ",(0,i.kt)("inlineCode",{parentName:"p"},"SELECT")," column list to assign the correct names. Do not rely on their positions within the SELECT\nclause."),(0,i.kt)("p",null,"Statement format:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"INSERT INTO <table name>\n< SELECT query >\nPARTITIONED BY <time frame>\n[ CLUSTERED BY <column list> ]\n")),(0,i.kt)("p",null,"INSERT consists of the following parts:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Optional ",(0,i.kt)("a",{parentName:"li",href:"/docs/multi-stage-query/reference#context-parameters"},"context parameters"),"."),(0,i.kt)("li",{parentName:"ol"},"An ",(0,i.kt)("inlineCode",{parentName:"li"},"INSERT INTO <dataSource>")," clause at the start of your query, such as ",(0,i.kt)("inlineCode",{parentName:"li"},"INSERT INTO your-table"),"."),(0,i.kt)("li",{parentName:"ol"},"A clause for the data you want to insert, such as ",(0,i.kt)("inlineCode",{parentName:"li"},"SELECT ... FROM ..."),". You can use ",(0,i.kt)("a",{parentName:"li",href:"#extern-function"},(0,i.kt)("inlineCode",{parentName:"a"},"EXTERN")),"\nto reference external tables using ",(0,i.kt)("inlineCode",{parentName:"li"},"FROM TABLE(EXTERN(...))"),"."),(0,i.kt)("li",{parentName:"ol"},"A ",(0,i.kt)("a",{parentName:"li",href:"#partitioned-by"},"PARTITIONED BY")," clause, such as ",(0,i.kt)("inlineCode",{parentName:"li"},"PARTITIONED BY DAY"),"."),(0,i.kt)("li",{parentName:"ol"},"An optional ",(0,i.kt)("a",{parentName:"li",href:"#clustered-by"},"CLUSTERED BY")," clause.")),(0,i.kt)("p",null,"For more information, see ",(0,i.kt)("a",{parentName:"p",href:"/docs/multi-stage-query/concepts#insert"},"Load data with INSERT"),"."),(0,i.kt)("h3",{id:"replace"},(0,i.kt)("inlineCode",{parentName:"h3"},"REPLACE")),(0,i.kt)("p",null,"You can use the ",(0,i.kt)("inlineCode",{parentName:"p"},"REPLACE")," function to replace all or some of the data."),(0,i.kt)("p",null,"Unlike standard SQL, ",(0,i.kt)("inlineCode",{parentName:"p"},"REPLACE")," loads data into the target table according to column name, not positionally. If necessary,\nuse ",(0,i.kt)("inlineCode",{parentName:"p"},"AS")," in your ",(0,i.kt)("inlineCode",{parentName:"p"},"SELECT")," column list to assign the correct names. Do not rely on their positions within the SELECT\nclause."),(0,i.kt)("h4",{id:"replace-all-data"},(0,i.kt)("inlineCode",{parentName:"h4"},"REPLACE")," all data"),(0,i.kt)("p",null,"Function format to replace all data:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"REPLACE INTO <target table>\nOVERWRITE ALL\n< SELECT query >\nPARTITIONED BY <time granularity>\n[ CLUSTERED BY <column list> ]\n")),(0,i.kt)("h4",{id:"replace-specific-time-ranges"},(0,i.kt)("inlineCode",{parentName:"h4"},"REPLACE")," specific time ranges"),(0,i.kt)("p",null,"Function format to replace specific time ranges:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"REPLACE INTO <target table>\nOVERWRITE WHERE __time >= TIMESTAMP '<lower bound>' AND __time < TIMESTAMP '<upper bound>'\n< SELECT query >\nPARTITIONED BY <time granularity>\n[ CLUSTERED BY <column list> ]\n")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"REPLACE")," consists of the following parts:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Optional ",(0,i.kt)("a",{parentName:"li",href:"/docs/multi-stage-query/reference#context-parameters"},"context parameters"),"."),(0,i.kt)("li",{parentName:"ol"},"A ",(0,i.kt)("inlineCode",{parentName:"li"},"REPLACE INTO <dataSource>")," clause at the start of your query, such as ",(0,i.kt)("inlineCode",{parentName:"li"},'REPLACE INTO "your-table".')),(0,i.kt)("li",{parentName:"ol"},"An OVERWRITE clause after the datasource, either OVERWRITE ALL or OVERWRITE WHERE:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"OVERWRITE ALL replaces the entire existing datasource with the results of the query."),(0,i.kt)("li",{parentName:"ul"},"OVERWRITE WHERE drops the time segments that match the condition you set. Conditions are based on the ",(0,i.kt)("inlineCode",{parentName:"li"},"__time"),"\ncolumn and use the format ",(0,i.kt)("inlineCode",{parentName:"li"},"__time [< > = <= >=] TIMESTAMP"),". Use them with AND, OR, and NOT between them, inclusive\nof the timestamps specified. No other expressions or functions are valid in OVERWRITE."))),(0,i.kt)("li",{parentName:"ol"},"A clause for the actual data you want to use for the replacement."),(0,i.kt)("li",{parentName:"ol"},"A ",(0,i.kt)("a",{parentName:"li",href:"#partitioned-by"},"PARTITIONED BY")," clause, such as ",(0,i.kt)("inlineCode",{parentName:"li"},"PARTITIONED BY DAY"),"."),(0,i.kt)("li",{parentName:"ol"},"An optional ",(0,i.kt)("a",{parentName:"li",href:"#clustered-by"},"CLUSTERED BY")," clause.")),(0,i.kt)("p",null,"For more information, see ",(0,i.kt)("a",{parentName:"p",href:"/docs/multi-stage-query/concepts#replace"},"Overwrite data with REPLACE"),"."),(0,i.kt)("h3",{id:"partitioned-by"},(0,i.kt)("inlineCode",{parentName:"h3"},"PARTITIONED BY")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"PARTITIONED BY <time granularity>")," clause is required for ",(0,i.kt)("a",{parentName:"p",href:"#insert"},"INSERT")," and ",(0,i.kt)("a",{parentName:"p",href:"#replace"},"REPLACE"),". See\n",(0,i.kt)("a",{parentName:"p",href:"/docs/multi-stage-query/concepts#partitioning"},"Partitioning")," for details."),(0,i.kt)("p",null,"The following granularity arguments are accepted:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Time unit keywords: ",(0,i.kt)("inlineCode",{parentName:"li"},"HOUR"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"DAY"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"MONTH"),", or ",(0,i.kt)("inlineCode",{parentName:"li"},"YEAR"),". Equivalent to ",(0,i.kt)("inlineCode",{parentName:"li"},"FLOOR(__time TO TimeUnit)"),"."),(0,i.kt)("li",{parentName:"ul"},"Time units as ISO 8601 period strings: :",(0,i.kt)("inlineCode",{parentName:"li"},"'PT1H'"),", '",(0,i.kt)("inlineCode",{parentName:"li"},"P1D"),", etc. (Druid 26.0 and later.)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"TIME_FLOOR(__time, 'granularity_string')"),", where granularity_string is one of the ISO 8601 periods listed below. The\nfirst argument must be ",(0,i.kt)("inlineCode",{parentName:"li"},"__time"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"FLOOR(__time TO TimeUnit)"),", where ",(0,i.kt)("inlineCode",{parentName:"li"},"TimeUnit")," is any unit supported by the ",(0,i.kt)("a",{parentName:"li",href:"/docs/querying/sql-scalar#date-and-time-functions"},"FLOOR function"),". The first argument must be ",(0,i.kt)("inlineCode",{parentName:"li"},"__time"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ALL")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"ALL TIME"),", which effectively disables time partitioning by placing all data in a single time chunk. To use\nLIMIT or OFFSET at the outer level of your ",(0,i.kt)("inlineCode",{parentName:"li"},"INSERT")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"REPLACE")," query, you must set ",(0,i.kt)("inlineCode",{parentName:"li"},"PARTITIONED BY")," to ",(0,i.kt)("inlineCode",{parentName:"li"},"ALL")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"ALL TIME"),".")),(0,i.kt)("p",null,"Earlier versions required the ",(0,i.kt)("inlineCode",{parentName:"p"},"TIME_FLOOR")," notation to specify a granularity other than the keywords.\nIn the current version, the string constant provides a simpler equivalent solution."),(0,i.kt)("p",null,"The following ISO 8601 periods are supported for ",(0,i.kt)("inlineCode",{parentName:"p"},"TIME_FLOOR")," and the string constant:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"PT1S"),(0,i.kt)("li",{parentName:"ul"},"PT1M"),(0,i.kt)("li",{parentName:"ul"},"PT5M"),(0,i.kt)("li",{parentName:"ul"},"PT10M"),(0,i.kt)("li",{parentName:"ul"},"PT15M"),(0,i.kt)("li",{parentName:"ul"},"PT30M"),(0,i.kt)("li",{parentName:"ul"},"PT1H"),(0,i.kt)("li",{parentName:"ul"},"PT6H"),(0,i.kt)("li",{parentName:"ul"},"P1D"),(0,i.kt)("li",{parentName:"ul"},"P1W"),(0,i.kt)("li",{parentName:"ul"},"P1M"),(0,i.kt)("li",{parentName:"ul"},"P3M"),(0,i.kt)("li",{parentName:"ul"},"P1Y")),(0,i.kt)("p",null,"For more information about partitioning, see ",(0,i.kt)("a",{parentName:"p",href:"/docs/multi-stage-query/concepts#partitioning"},"Partitioning"),"."),(0,i.kt)("h3",{id:"clustered-by"},(0,i.kt)("inlineCode",{parentName:"h3"},"CLUSTERED BY")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"CLUSTERED BY <column list>")," clause is optional for ",(0,i.kt)("a",{parentName:"p",href:"#insert"},"INSERT")," and ",(0,i.kt)("a",{parentName:"p",href:"#replace"},"REPLACE"),". It accepts a list of\ncolumn names or expressions."),(0,i.kt)("p",null,"For more information about clustering, see ",(0,i.kt)("a",{parentName:"p",href:"/docs/multi-stage-query/concepts#clustering"},"Clustering"),"."),(0,i.kt)("a",{name:"context"}),(0,i.kt)("h2",{id:"context-parameters"},"Context parameters"),(0,i.kt)("p",null,"In addition to the Druid SQL ",(0,i.kt)("a",{parentName:"p",href:"/docs/querying/sql-query-context"},"context parameters"),", the multi-stage query task engine accepts certain context parameters that are specific to it."),(0,i.kt)("p",null,"Use context parameters alongside your queries to customize the behavior of the query. If you're using the API, include the context parameters in the query context when you submit a query:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "query": "SELECT 1 + 1",\n  "context": {\n    "<key>": "<value>",\n    "maxNumTasks": 3\n  }\n}\n')),(0,i.kt)("p",null,"If you're using the web console, you can specify the context parameters through various UI options."),(0,i.kt)("p",null,"The following table lists the context parameters for the MSQ task engine:"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"),(0,i.kt)("th",{parentName:"tr",align:null},"Default value"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"maxNumTasks")),(0,i.kt)("td",{parentName:"tr",align:null},"SELECT, INSERT, REPLACE",(0,i.kt)("br",null),(0,i.kt)("br",null),"The maximum total number of tasks to launch, including the controller task. The lowest possible value for this setting is 2: one controller and one worker. All tasks must be able to launch simultaneously. If they cannot, the query returns a ",(0,i.kt)("inlineCode",{parentName:"td"},"TaskStartTimeout")," error code after approximately 10 minutes.",(0,i.kt)("br",null),(0,i.kt)("br",null),"May also be provided as ",(0,i.kt)("inlineCode",{parentName:"td"},"numTasks"),". If both are present, ",(0,i.kt)("inlineCode",{parentName:"td"},"maxNumTasks")," takes priority."),(0,i.kt)("td",{parentName:"tr",align:null},"2")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"taskAssignment")),(0,i.kt)("td",{parentName:"tr",align:null},"SELECT, INSERT, REPLACE",(0,i.kt)("br",null),(0,i.kt)("br",null),"Determines how many tasks to use. Possible values include: ",(0,i.kt)("ul",null,(0,i.kt)("li",null,(0,i.kt)("inlineCode",{parentName:"td"},"max"),": Uses as many tasks as possible, up to ",(0,i.kt)("inlineCode",{parentName:"td"},"maxNumTasks"),"."),(0,i.kt)("li",null,(0,i.kt)("inlineCode",{parentName:"td"},"auto"),": When file sizes can be determined through directory listing (for example: local files, S3, GCS, HDFS) uses as few tasks as possible without exceeding 10 GiB or 10,000 files per task, unless exceeding these limits is necessary to stay within ",(0,i.kt)("inlineCode",{parentName:"td"},"maxNumTasks"),". When file sizes cannot be determined through directory listing (for example: http), behaves the same as ",(0,i.kt)("inlineCode",{parentName:"td"},"max"),"."))),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"max"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"finalizeAggregations")),(0,i.kt)("td",{parentName:"tr",align:null},"SELECT, INSERT, REPLACE",(0,i.kt)("br",null),(0,i.kt)("br",null),"Determines the type of aggregation to return. If true, Druid finalizes the results of complex aggregations that directly appear in query results. If false, Druid returns the aggregation's intermediate type rather than finalized type. This parameter is useful during ingestion, where it enables storing sketches directly in Druid tables. For more information about aggregations, see ",(0,i.kt)("a",{parentName:"td",href:"/docs/querying/sql-aggregations"},"SQL aggregation functions"),"."),(0,i.kt)("td",{parentName:"tr",align:null},"true")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"rowsInMemory")),(0,i.kt)("td",{parentName:"tr",align:null},"INSERT or REPLACE",(0,i.kt)("br",null),(0,i.kt)("br",null),"Maximum number of rows to store in memory at once before flushing to disk during the segment generation process. Ignored for non-INSERT queries. In most cases, use the default value. You may need to override the default if you run into one of the ",(0,i.kt)("a",{parentName:"td",href:"/docs/multi-stage-query/known-issues"},"known issues")," around memory usage."),(0,i.kt)("td",{parentName:"tr",align:null},"100,000")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"segmentSortOrder")),(0,i.kt)("td",{parentName:"tr",align:null},"INSERT or REPLACE",(0,i.kt)("br",null),(0,i.kt)("br",null),"Normally, Druid sorts rows in individual segments using ",(0,i.kt)("inlineCode",{parentName:"td"},"__time")," first, followed by the ",(0,i.kt)("a",{parentName:"td",href:"#clustered-by"},"CLUSTERED BY")," clause. When you set ",(0,i.kt)("inlineCode",{parentName:"td"},"segmentSortOrder"),", Druid sorts rows in segments using this column list first, followed by the CLUSTERED BY order.",(0,i.kt)("br",null),(0,i.kt)("br",null),"You provide the column list as comma-separated values or as a JSON array in string form. If your query includes ",(0,i.kt)("inlineCode",{parentName:"td"},"__time"),", then this list must begin with ",(0,i.kt)("inlineCode",{parentName:"td"},"__time"),". For example, consider an INSERT query that uses ",(0,i.kt)("inlineCode",{parentName:"td"},"CLUSTERED BY country")," and has ",(0,i.kt)("inlineCode",{parentName:"td"},"segmentSortOrder")," set to ",(0,i.kt)("inlineCode",{parentName:"td"},"__time,city"),". Within each time chunk, Druid assigns rows to segments based on ",(0,i.kt)("inlineCode",{parentName:"td"},"country"),", and then within each of those segments, Druid sorts those rows by ",(0,i.kt)("inlineCode",{parentName:"td"},"__time")," first, then ",(0,i.kt)("inlineCode",{parentName:"td"},"city"),", then ",(0,i.kt)("inlineCode",{parentName:"td"},"country"),"."),(0,i.kt)("td",{parentName:"tr",align:null},"empty list")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"maxParseExceptions")),(0,i.kt)("td",{parentName:"tr",align:null},"SELECT, INSERT, REPLACE",(0,i.kt)("br",null),(0,i.kt)("br",null),"Maximum number of parse exceptions that are ignored while executing the query before it stops with ",(0,i.kt)("inlineCode",{parentName:"td"},"TooManyWarningsFault"),". To ignore all the parse exceptions, set the value to -1."),(0,i.kt)("td",{parentName:"tr",align:null},"0")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"rowsPerSegment")),(0,i.kt)("td",{parentName:"tr",align:null},"INSERT or REPLACE",(0,i.kt)("br",null),(0,i.kt)("br",null),"The number of rows per segment to target. The actual number of rows per segment may be somewhat higher or lower than this number. In most cases, use the default. For general information about sizing rows per segment, see ",(0,i.kt)("a",{parentName:"td",href:"/docs/operations/segment-optimization"},"Segment Size Optimization"),"."),(0,i.kt)("td",{parentName:"tr",align:null},"3,000,000")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"indexSpec")),(0,i.kt)("td",{parentName:"tr",align:null},"INSERT or REPLACE",(0,i.kt)("br",null),(0,i.kt)("br",null),"An ",(0,i.kt)("a",{parentName:"td",href:"/docs/ingestion/ingestion-spec#indexspec"},(0,i.kt)("inlineCode",{parentName:"a"},"indexSpec"))," to use when generating segments. May be a JSON string or object. See ",(0,i.kt)("a",{parentName:"td",href:"/docs/ingestion/ingestion-spec#front-coding"},"Front coding")," for details on configuring an ",(0,i.kt)("inlineCode",{parentName:"td"},"indexSpec")," with front coding."),(0,i.kt)("td",{parentName:"tr",align:null},"See ",(0,i.kt)("a",{parentName:"td",href:"/docs/ingestion/ingestion-spec#indexspec"},(0,i.kt)("inlineCode",{parentName:"a"},"indexSpec")),".")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"clusterStatisticsMergeMode")),(0,i.kt)("td",{parentName:"tr",align:null},"Whether to use parallel or sequential mode for merging of the worker sketches. Can be ",(0,i.kt)("inlineCode",{parentName:"td"},"PARALLEL"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"SEQUENTIAL")," or ",(0,i.kt)("inlineCode",{parentName:"td"},"AUTO"),". See ",(0,i.kt)("a",{parentName:"td",href:"#sketch-merging-mode"},"Sketch Merging Mode")," for more information."),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"PARALLEL"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"durableShuffleStorage")),(0,i.kt)("td",{parentName:"tr",align:null},"SELECT, INSERT, REPLACE ",(0,i.kt)("br",null),(0,i.kt)("br",null),"Whether to use durable storage for shuffle mesh. To use this feature, configure the durable storage at the server level using ",(0,i.kt)("inlineCode",{parentName:"td"},"druid.msq.intermediate.storage.enable=true"),"). If these properties are not configured, any query with the context variable ",(0,i.kt)("inlineCode",{parentName:"td"},"durableShuffleStorage=true")," fails with a configuration error. ",(0,i.kt)("br",null),(0,i.kt)("br",null)),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"false"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"faultTolerance")),(0,i.kt)("td",{parentName:"tr",align:null},"SELECT, INSERT, REPLACE",(0,i.kt)("br",null),(0,i.kt)("br",null)," Whether to turn on fault tolerance mode or not. Failed workers are retried based on ",(0,i.kt)("a",{parentName:"td",href:"#limits"},"Limits"),". Cannot be used when ",(0,i.kt)("inlineCode",{parentName:"td"},"durableShuffleStorage")," is explicitly set to false."),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"false"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"composedIntermediateSuperSorterStorageEnabled")),(0,i.kt)("td",{parentName:"tr",align:null},"SELECT, INSERT, REPLACE",(0,i.kt)("br",null),(0,i.kt)("br",null)," Whether to enable automatic fallback to durable storage from local storage for sorting's intermediate data. Requires to setup ",(0,i.kt)("inlineCode",{parentName:"td"},"intermediateSuperSorterStorageMaxLocalBytes")," limit for local storage and durable shuffle storage feature as well."),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"false"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"intermediateSuperSorterStorageMaxLocalBytes")),(0,i.kt)("td",{parentName:"tr",align:null},"SELECT, INSERT, REPLACE",(0,i.kt)("br",null),(0,i.kt)("br",null)," Whether to enable a byte limit on local storage for sorting's intermediate data. If that limit is crossed, the task fails with ",(0,i.kt)("inlineCode",{parentName:"td"},"ResourceLimitExceededException"),"."),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"9223372036854775807"))))),(0,i.kt)("h2",{id:"sketch-merging-mode"},"Sketch Merging Mode"),(0,i.kt)("p",null,"This section details the advantages and performance of various Cluster By Statistics Merge Modes."),(0,i.kt)("p",null,"If a query requires key statistics to generate partition boundaries, key statistics are gathered by the workers while\nreading rows from the datasource. These statistics must be transferred to the controller to be merged together.\n",(0,i.kt)("inlineCode",{parentName:"p"},"clusterStatisticsMergeMode")," configures the way in which this happens."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"PARALLEL")," mode fetches the key statistics for all time chunks from all workers together and the controller then downsamples\nthe sketch if it does not fit in memory. This is faster than ",(0,i.kt)("inlineCode",{parentName:"p"},"SEQUENTIAL")," mode as there is less over head in fetching sketches\nfor all time chunks together. This is good for small sketches which won't be down sampled even if merged together or if\naccuracy in segment sizing for the ingestion is not very important."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"SEQUENTIAL")," mode fetches the sketches in ascending order of time and generates the partition boundaries for one time\nchunk at a time. This gives more working memory to the controller for merging sketches, which results in less\ndown sampling and thus, more accuracy. There is, however, a time overhead on fetching sketches in sequential order. This is\ngood for cases where accuracy is important."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"AUTO")," mode tries to find the best approach based on number of workers. If there are more\nthan 100 workers, ",(0,i.kt)("inlineCode",{parentName:"p"},"SEQUENTIAL")," is chosen, otherwise, ",(0,i.kt)("inlineCode",{parentName:"p"},"PARALLEL")," is chosen."),(0,i.kt)("h2",{id:"durable-storage"},"Durable Storage"),(0,i.kt)("p",null,"This section enumerates the advantages and performance implications of enabling durable storage while executing MSQ tasks."),(0,i.kt)("p",null,"To prevent durable storage from getting filled up with temporary files in case the tasks fail to clean them up, a periodic\ncleaner can be scheduled to clean the directories corresponding to which there isn't a controller task running. It utilizes\nthe storage connector to work upon the durable storage. The durable storage location should only be utilized to store the output\nfor cluster's MSQ tasks. If the location contains other files or directories, then they will get cleaned up as well.\nFollowing table lists the properties that can be set to control the behavior of the durable storage of the cluster."),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,i.kt)("th",{parentName:"tr",align:null},"Default"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"druid.msq.intermediate.storage.enable")),(0,i.kt)("td",{parentName:"tr",align:null},"true"),(0,i.kt)("td",{parentName:"tr",align:null},"Whether to enable durable storage for the cluster")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"druid.msq.intermediate.storage.cleaner.enabled")),(0,i.kt)("td",{parentName:"tr",align:null},"false"),(0,i.kt)("td",{parentName:"tr",align:null},"Whether durable storage cleaner should be enabled for the cluster. This should be set on the overlord")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"druid.msq.intermediate.storage.cleaner.delaySeconds")),(0,i.kt)("td",{parentName:"tr",align:null},"86400"),(0,i.kt)("td",{parentName:"tr",align:null},"The delay (in seconds) after the last run post which the durable storage cleaner would clean the outputs. This should be set on the overlord")))),(0,i.kt)("h2",{id:"limits"},"Limits"),(0,i.kt)("p",null,"Knowing the limits for the MSQ task engine can help you troubleshoot any ",(0,i.kt)("a",{parentName:"p",href:"#error-codes"},"errors")," that you encounter. Many of the errors occur as a result of reaching a limit."),(0,i.kt)("p",null,"The following table lists query limits:"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Limit"),(0,i.kt)("th",{parentName:"tr",align:null},"Value"),(0,i.kt)("th",{parentName:"tr",align:null},"Error if exceeded"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Size of an individual row written to a frame. Row size when written to a frame may differ from the original row size."),(0,i.kt)("td",{parentName:"tr",align:null},"1 MB"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"#error_RowTooLarge"},(0,i.kt)("inlineCode",{parentName:"a"},"RowTooLarge")))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Number of segment-granular time chunks encountered during ingestion."),(0,i.kt)("td",{parentName:"tr",align:null},"5,000"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"#error_TooManyBuckets"},(0,i.kt)("inlineCode",{parentName:"a"},"TooManyBuckets")))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Number of input files/segments per worker."),(0,i.kt)("td",{parentName:"tr",align:null},"10,000"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"#error_TooManyInputFiles"},(0,i.kt)("inlineCode",{parentName:"a"},"TooManyInputFiles")))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Number of output partitions for any one stage. Number of segments generated during ingestion."),(0,i.kt)("td",{parentName:"tr",align:null},"25,000"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"#error_TooManyPartitions"},(0,i.kt)("inlineCode",{parentName:"a"},"TooManyPartitions")))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Number of output columns for any one stage."),(0,i.kt)("td",{parentName:"tr",align:null},"2,000"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"#error_TooManyColumns"},(0,i.kt)("inlineCode",{parentName:"a"},"TooManyColumns")))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Number of cluster by columns that can appear in a stage"),(0,i.kt)("td",{parentName:"tr",align:null},"1,500"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"#error_TooManyClusteredByColumns"},(0,i.kt)("inlineCode",{parentName:"a"},"TooManyClusteredByColumns")))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Number of workers for any one stage."),(0,i.kt)("td",{parentName:"tr",align:null},"Hard limit is 1,000. Memory-dependent soft limit may be lower."),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"#error_TooManyWorkers"},(0,i.kt)("inlineCode",{parentName:"a"},"TooManyWorkers")))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Maximum memory occupied by broadcasted tables."),(0,i.kt)("td",{parentName:"tr",align:null},"30% of each ",(0,i.kt)("a",{parentName:"td",href:"/docs/multi-stage-query/concepts#memory-usage"},"processor memory bundle"),"."),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"#error_BroadcastTablesTooLarge"},(0,i.kt)("inlineCode",{parentName:"a"},"BroadcastTablesTooLarge")))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Maximum relaunch attempts per worker. Initial run is not a relaunch. The worker will be spawned 1 + ",(0,i.kt)("inlineCode",{parentName:"td"},"workerRelaunchLimit")," times before the job fails."),(0,i.kt)("td",{parentName:"tr",align:null},"2"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"TooManyAttemptsForWorker"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Maximum relaunch attempts for a job across all workers."),(0,i.kt)("td",{parentName:"tr",align:null},"100"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"TooManyAttemptsForJob"))))),(0,i.kt)("a",{name:"errors"}),(0,i.kt)("h2",{id:"error-codes"},"Error codes"),(0,i.kt)("p",null,"The following table describes error codes you may encounter in the ",(0,i.kt)("inlineCode",{parentName:"p"},"multiStageQuery.payload.status.errorReport.error.errorCode")," field:"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Code"),(0,i.kt)("th",{parentName:"tr",align:null},"Meaning"),(0,i.kt)("th",{parentName:"tr",align:null},"Additional fields"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{name:"error_BroadcastTablesTooLarge"},(0,i.kt)("inlineCode",{parentName:"td"},"BroadcastTablesTooLarge"))),(0,i.kt)("td",{parentName:"tr",align:null},"The size of the broadcast tables used in the right hand side of the join exceeded the memory reserved for them in a worker task.",(0,i.kt)("br",null),(0,i.kt)("br",null),"Try increasing the peon memory or reducing the size of the broadcast tables."),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"maxBroadcastTablesSize"),": Memory reserved for the broadcast tables, measured in bytes.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{name:"error_Canceled"},(0,i.kt)("inlineCode",{parentName:"td"},"Canceled"))),(0,i.kt)("td",{parentName:"tr",align:null},"The query was canceled. Common reasons for cancellation:",(0,i.kt)("br",null),(0,i.kt)("br",null),(0,i.kt)("ul",null,(0,i.kt)("li",null,"User-initiated shutdown of the controller task via the ",(0,i.kt)("inlineCode",{parentName:"td"},"/druid/indexer/v1/task/{taskId}/shutdown")," API."),(0,i.kt)("li",null,"Restart or failure of the server process that was running the controller task."))),(0,i.kt)("td",{parentName:"tr",align:null})),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{name:"error_CannotParseExternalData"},(0,i.kt)("inlineCode",{parentName:"td"},"CannotParseExternalData"))),(0,i.kt)("td",{parentName:"tr",align:null},"A worker task could not parse data from an external datasource."),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"errorMessage"),": More details on why parsing failed.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{name:"error_ColumnNameRestricted"},(0,i.kt)("inlineCode",{parentName:"td"},"ColumnNameRestricted"))),(0,i.kt)("td",{parentName:"tr",align:null},"The query uses a restricted column name."),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"columnName"),": The restricted column name.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{name:"error_ColumnTypeNotSupported"},(0,i.kt)("inlineCode",{parentName:"td"},"ColumnTypeNotSupported"))),(0,i.kt)("td",{parentName:"tr",align:null},"The column type is not supported. This can be because:",(0,i.kt)("br",null)," ",(0,i.kt)("br",null),(0,i.kt)("ul",null,(0,i.kt)("li",null,"Support for writing or reading from a particular column type is not supported."),(0,i.kt)("li",null,"The query attempted to use a column type that is not supported by the frame format. This occurs with ARRAY types, which are not yet implemented for frames."))),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"columnName"),": The column name with an unsupported type.",(0,i.kt)("br",null)," ",(0,i.kt)("br",null),(0,i.kt)("inlineCode",{parentName:"td"},"columnType"),": The unknown column type.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{name:"error_InsertCannotAllocateSegment"},(0,i.kt)("inlineCode",{parentName:"td"},"InsertCannotAllocateSegment"))),(0,i.kt)("td",{parentName:"tr",align:null},"The controller task could not allocate a new segment ID due to conflict with existing segments or pending segments. Common reasons for such conflicts:",(0,i.kt)("br",null)," ",(0,i.kt)("br",null),(0,i.kt)("ul",null,(0,i.kt)("li",null,"Attempting to mix different granularities in the same intervals of the same datasource."),(0,i.kt)("li",null,"Prior ingestions that used non-extendable shard specs."))),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"dataSource"),(0,i.kt)("br",null)," ",(0,i.kt)("br",null),(0,i.kt)("inlineCode",{parentName:"td"},"interval"),": The interval for the attempted new segment allocation.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{name:"error_InsertCannotBeEmpty"},(0,i.kt)("inlineCode",{parentName:"td"},"InsertCannotBeEmpty"))),(0,i.kt)("td",{parentName:"tr",align:null},"An INSERT or REPLACE query did not generate any output rows in a situation where output rows are required for success. This can happen for INSERT or REPLACE queries with ",(0,i.kt)("inlineCode",{parentName:"td"},"PARTITIONED BY")," set to something other than ",(0,i.kt)("inlineCode",{parentName:"td"},"ALL")," or ",(0,i.kt)("inlineCode",{parentName:"td"},"ALL TIME"),"."),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"dataSource"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{name:"error_InsertCannotOrderByDescending"},(0,i.kt)("inlineCode",{parentName:"td"},"InsertCannotOrderByDescending"))),(0,i.kt)("td",{parentName:"tr",align:null},"An INSERT query contained a ",(0,i.kt)("inlineCode",{parentName:"td"},"CLUSTERED BY")," expression in descending order. Druid's segment generation code only supports ascending order."),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"columnName"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{name:"error_InsertCannotReplaceExistingSegment"},(0,i.kt)("inlineCode",{parentName:"td"},"InsertCannotReplaceExistingSegment"))),(0,i.kt)("td",{parentName:"tr",align:null},"A REPLACE query cannot proceed because an existing segment partially overlaps those bounds, and the portion within the bounds is not fully overshadowed by query results. ",(0,i.kt)("br",null)," ",(0,i.kt)("br",null),"There are two ways to address this without modifying your query:",(0,i.kt)("ul",null,(0,i.kt)("li",null,"Shrink the OVERLAP filter to match the query results."),(0,i.kt)("li",null,"Expand the OVERLAP filter to fully contain the existing segment."))),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"segmentId"),": The existing segment ",(0,i.kt)("br",null))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{name:"error_InsertLockPreempted"},(0,i.kt)("inlineCode",{parentName:"td"},"InsertLockPreempted"))),(0,i.kt)("td",{parentName:"tr",align:null},"An INSERT or REPLACE query was canceled by a higher-priority ingestion job, such as a real-time ingestion task."),(0,i.kt)("td",{parentName:"tr",align:null})),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{name:"error_InsertTimeNull"},(0,i.kt)("inlineCode",{parentName:"td"},"InsertTimeNull"))),(0,i.kt)("td",{parentName:"tr",align:null},"An INSERT or REPLACE query encountered a null timestamp in the ",(0,i.kt)("inlineCode",{parentName:"td"},"__time")," field.",(0,i.kt)("br",null),(0,i.kt)("br",null),"This can happen due to using an expression like ",(0,i.kt)("inlineCode",{parentName:"td"},"TIME_PARSE(timestamp) AS __time")," with a timestamp that cannot be parsed. (TIME_PARSE returns null when it cannot parse a timestamp.) In this case, try parsing your timestamps using a different function or pattern.",(0,i.kt)("br",null),(0,i.kt)("br",null),"If your timestamps may genuinely be null, consider using COALESCE to provide a default value. One option is CURRENT_TIMESTAMP, which represents the start time of the job."),(0,i.kt)("td",{parentName:"tr",align:null})),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{name:"error_InsertTimeOutOfBounds"},(0,i.kt)("inlineCode",{parentName:"td"},"InsertTimeOutOfBounds"))),(0,i.kt)("td",{parentName:"tr",align:null},"A REPLACE query generated a timestamp outside the bounds of the TIMESTAMP parameter for your OVERWRITE WHERE clause.",(0,i.kt)("br",null)," ",(0,i.kt)("br",null),"To avoid this error, verify that the you specified is valid."),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"interval"),": time chunk interval corresponding to the out-of-bounds timestamp")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{name:"error_InvalidNullByte"},(0,i.kt)("inlineCode",{parentName:"td"},"InvalidNullByte"))),(0,i.kt)("td",{parentName:"tr",align:null},"A string column included a null byte. Null bytes in strings are not permitted."),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"column"),": The column that included the null byte")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{name:"error_QueryNotSupported"},(0,i.kt)("inlineCode",{parentName:"td"},"QueryNotSupported"))),(0,i.kt)("td",{parentName:"tr",align:null},"QueryKit could not translate the provided native query to a multi-stage query.",(0,i.kt)("br",null)," ",(0,i.kt)("br",null),"This can happen if the query uses features that aren't supported, like GROUPING SETS."),(0,i.kt)("td",{parentName:"tr",align:null})),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{name:"error_RowTooLarge"},(0,i.kt)("inlineCode",{parentName:"td"},"RowTooLarge"))),(0,i.kt)("td",{parentName:"tr",align:null},"The query tried to process a row that was too large to write to a single frame. See the ",(0,i.kt)("a",{parentName:"td",href:"#limits"},"Limits")," table for specific limits on frame size. Note that the effective maximum row size is smaller than the maximum frame size due to alignment considerations during frame writing."),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"maxFrameSize"),": The limit on the frame size.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{name:"error_TaskStartTimeout"},(0,i.kt)("inlineCode",{parentName:"td"},"TaskStartTimeout"))),(0,i.kt)("td",{parentName:"tr",align:null},"Unable to launch all the worker tasks in time. ",(0,i.kt)("br",null)," ",(0,i.kt)("br",null),"There might be insufficient available slots to start all the worker tasks simultaneously.",(0,i.kt)("br",null)," ",(0,i.kt)("br",null)," Try splitting up the query into smaller chunks with lesser ",(0,i.kt)("inlineCode",{parentName:"td"},"maxNumTasks")," number. Another option is to increase capacity."),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"numTasks"),": The number of tasks attempted to launch.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{name:"error_TooManyAttemptsForJob"},(0,i.kt)("inlineCode",{parentName:"td"},"TooManyAttemptsForJob"))),(0,i.kt)("td",{parentName:"tr",align:null},"Total relaunch attempt count across all workers exceeded max relaunch attempt limit. See the ",(0,i.kt)("a",{parentName:"td",href:"#limits"},"Limits")," table for the specific limit."),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"maxRelaunchCount"),": Max number of relaunches across all the workers defined in the ",(0,i.kt)("a",{parentName:"td",href:"#limits"},"Limits")," section. ",(0,i.kt)("br",null),(0,i.kt)("br",null)," ",(0,i.kt)("inlineCode",{parentName:"td"},"currentRelaunchCount"),": current relaunch counter for the job across all workers. ",(0,i.kt)("br",null),(0,i.kt)("br",null)," ",(0,i.kt)("inlineCode",{parentName:"td"},"taskId"),": Latest task id which failed ",(0,i.kt)("br",null)," ",(0,i.kt)("br",null)," ",(0,i.kt)("inlineCode",{parentName:"td"},"rootErrorMessage"),": Error message of the latest failed task.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{name:"error_TooManyAttemptsForWorker"},(0,i.kt)("inlineCode",{parentName:"td"},"TooManyAttemptsForWorker"))),(0,i.kt)("td",{parentName:"tr",align:null},"Worker exceeded maximum relaunch attempt count as defined in the ",(0,i.kt)("a",{parentName:"td",href:"#limits"},"Limits")," section."),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"maxPerWorkerRelaunchCount"),": Max number of relaunches allowed per worker as defined in the ",(0,i.kt)("a",{parentName:"td",href:"#limits"},"Limits")," section. ",(0,i.kt)("br",null),(0,i.kt)("br",null)," ",(0,i.kt)("inlineCode",{parentName:"td"},"workerNumber"),": the worker number for which the task failed ",(0,i.kt)("br",null),(0,i.kt)("br",null)," ",(0,i.kt)("inlineCode",{parentName:"td"},"taskId"),": Latest task id which failed ",(0,i.kt)("br",null)," ",(0,i.kt)("br",null)," ",(0,i.kt)("inlineCode",{parentName:"td"},"rootErrorMessage"),": Error message of the latest failed task.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{name:"error_TooManyBuckets"},(0,i.kt)("inlineCode",{parentName:"td"},"TooManyBuckets"))),(0,i.kt)("td",{parentName:"tr",align:null},"Exceeded the maximum number of partition buckets for a stage (5,000 partition buckets).",(0,i.kt)("br",null),"< br />Partition buckets are created for each ",(0,i.kt)("a",{parentName:"td",href:"#partitioned-by"},(0,i.kt)("inlineCode",{parentName:"a"},"PARTITIONED BY"))," time chunk for INSERT and REPLACE queries. The most common reason for this error is that your ",(0,i.kt)("inlineCode",{parentName:"td"},"PARTITIONED BY")," is too narrow relative to your data."),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"maxBuckets"),": The limit on partition buckets.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{name:"error_TooManyInputFiles"},(0,i.kt)("inlineCode",{parentName:"td"},"TooManyInputFiles"))),(0,i.kt)("td",{parentName:"tr",align:null},"Exceeded the maximum number of input files or segments per worker (10,000 files or segments).",(0,i.kt)("br",null),(0,i.kt)("br",null),"If you encounter this limit, consider adding more workers, or breaking up your query into smaller queries that process fewer files or segments per query."),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"numInputFiles"),": The total number of input files/segments for the stage.",(0,i.kt)("br",null),(0,i.kt)("br",null),(0,i.kt)("inlineCode",{parentName:"td"},"maxInputFiles"),": The maximum number of input files/segments per worker per stage.",(0,i.kt)("br",null),(0,i.kt)("br",null),(0,i.kt)("inlineCode",{parentName:"td"},"minNumWorker"),": The minimum number of workers required for a successful run.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{name:"error_TooManyPartitions"},(0,i.kt)("inlineCode",{parentName:"td"},"TooManyPartitions"))),(0,i.kt)("td",{parentName:"tr",align:null},"Exceeded the maximum number of partitions for a stage (25,000 partitions).",(0,i.kt)("br",null),(0,i.kt)("br",null),"This can occur with INSERT or REPLACE statements that generate large numbers of segments, since each segment is associated with a partition. If you encounter this limit, consider breaking up your INSERT or REPLACE statement into smaller statements that process less data per statement."),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"maxPartitions"),": The limit on partitions which was exceeded")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{name:"error_TooManyClusteredByColumns"},(0,i.kt)("inlineCode",{parentName:"td"},"TooManyClusteredByColumns"))),(0,i.kt)("td",{parentName:"tr",align:null},"Exceeded the maximum number of clustering columns for a stage (1,500 columns).",(0,i.kt)("br",null),(0,i.kt)("br",null),"This can occur with ",(0,i.kt)("inlineCode",{parentName:"td"},"CLUSTERED BY"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"ORDER BY"),", or ",(0,i.kt)("inlineCode",{parentName:"td"},"GROUP BY")," with a large number of columns."),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"numColumns"),": The number of columns requested.",(0,i.kt)("br",null),(0,i.kt)("br",null),(0,i.kt)("inlineCode",{parentName:"td"},"maxColumns"),": The limit on columns which was exceeded.",(0,i.kt)("inlineCode",{parentName:"td"},"stage"),": The stage number exceeding the limit",(0,i.kt)("br",null),(0,i.kt)("br",null))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{name:"error_TooManyColumns"},(0,i.kt)("inlineCode",{parentName:"td"},"TooManyColumns"))),(0,i.kt)("td",{parentName:"tr",align:null},"Exceeded the maximum number of columns for a stage (2,000 columns)."),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"numColumns"),": The number of columns requested.",(0,i.kt)("br",null),(0,i.kt)("br",null),(0,i.kt)("inlineCode",{parentName:"td"},"maxColumns"),": The limit on columns which was exceeded.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{name:"error_TooManyWarnings"},(0,i.kt)("inlineCode",{parentName:"td"},"TooManyWarnings"))),(0,i.kt)("td",{parentName:"tr",align:null},"Exceeded the maximum allowed number of warnings of a particular type."),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"rootErrorCode"),": The error code corresponding to the exception that exceeded the required limit. ",(0,i.kt)("br",null),(0,i.kt)("br",null),(0,i.kt)("inlineCode",{parentName:"td"},"maxWarnings"),": Maximum number of warnings that are allowed for the corresponding ",(0,i.kt)("inlineCode",{parentName:"td"},"rootErrorCode"),".")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{name:"error_TooManyWorkers"},(0,i.kt)("inlineCode",{parentName:"td"},"TooManyWorkers"))),(0,i.kt)("td",{parentName:"tr",align:null},"Exceeded the maximum number of simultaneously-running workers. See the ",(0,i.kt)("a",{parentName:"td",href:"#limits"},"Limits")," table for more details."),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"workers"),": The number of simultaneously running workers that exceeded a hard or soft limit. This may be larger than the number of workers in any one stage if multiple stages are running simultaneously. ",(0,i.kt)("br",null),(0,i.kt)("br",null),(0,i.kt)("inlineCode",{parentName:"td"},"maxWorkers"),": The hard or soft limit on workers that was exceeded. If this is lower than the hard limit (1,000 workers), then you can increase the limit by adding more memory to each task.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{name:"error_NotEnoughMemory"},(0,i.kt)("inlineCode",{parentName:"td"},"NotEnoughMemory"))),(0,i.kt)("td",{parentName:"tr",align:null},"Insufficient memory to launch a stage."),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"serverMemory"),": The amount of memory available to a single process.",(0,i.kt)("br",null),(0,i.kt)("br",null),(0,i.kt)("inlineCode",{parentName:"td"},"serverWorkers"),": The number of workers running in a single process.",(0,i.kt)("br",null),(0,i.kt)("br",null),(0,i.kt)("inlineCode",{parentName:"td"},"serverThreads"),": The number of threads in a single process.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{name:"error_WorkerFailed"},(0,i.kt)("inlineCode",{parentName:"td"},"WorkerFailed"))),(0,i.kt)("td",{parentName:"tr",align:null},"A worker task failed unexpectedly."),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"errorMsg"),(0,i.kt)("br",null),(0,i.kt)("br",null),(0,i.kt)("inlineCode",{parentName:"td"},"workerTaskId"),": The ID of the worker task.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{name:"error_WorkerRpcFailed"},(0,i.kt)("inlineCode",{parentName:"td"},"WorkerRpcFailed"))),(0,i.kt)("td",{parentName:"tr",align:null},"A remote procedure call to a worker task failed and could not recover."),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"workerTaskId"),": the id of the worker task")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{name:"error_UnknownError"},(0,i.kt)("inlineCode",{parentName:"td"},"UnknownError"))),(0,i.kt)("td",{parentName:"tr",align:null},"All other errors."),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"message"))))))}k.isMDXComponent=!0}}]);