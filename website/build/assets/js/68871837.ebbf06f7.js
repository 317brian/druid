"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[5975],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>h});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),d=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},s=function(e){var t=d(e.components);return r.createElement(p.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),c=d(n),m=a,h=c["".concat(p,".").concat(m)]||c[m]||u[m]||i;return n?r.createElement(h,o(o({ref:t},s),{},{components:n})):r.createElement(h,o({ref:t},s))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=m;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[c]="string"==typeof e?e:a,o[1]=l;for(var d=2;d<i;d++)o[d]=n[d];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},942:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>p,default:()=>m,frontMatter:()=>l,metadata:()=>d,toc:()=>c});var r=n(7462),a=n(3366),i=(n(7294),n(3905)),o=["components"],l={id:"druid-pac4j",title:"Druid pac4j based Security extension"},p=void 0,d={unversionedId:"development/extensions-core/druid-pac4j",id:"development/extensions-core/druid-pac4j",title:"Druid pac4j based Security extension",description:"\x3c!--",source:"@site/../docs/development/extensions-core/druid-pac4j.md",sourceDirName:"development/extensions-core",slug:"/development/extensions-core/druid-pac4j",permalink:"/docs/development/extensions-core/druid-pac4j",draft:!1,editUrl:"https://github.com/apache/druid/edit/master/docs/../docs/development/extensions-core/druid-pac4j.md",tags:[],version:"current",lastUpdatedBy:"Gian Merlino",lastUpdatedAt:1663390691,formattedLastUpdatedAt:"Sep 17, 2022",frontMatter:{id:"druid-pac4j",title:"Druid pac4j based Security extension"},sidebar:"docs",previous:{title:"ORC Extension",permalink:"/docs/development/extensions-core/orc"},next:{title:"Apache Parquet Extension",permalink:"/docs/development/extensions-core/parquet"}},s={},c=[{value:"Configuration",id:"configuration",level:2},{value:"Creating an Authenticator",id:"creating-an-authenticator",level:3},{value:"Properties",id:"properties",level:3}],u={toc:c};function m(e){var t=e.components,n=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Apache Druid Extension to enable ",(0,i.kt)("a",{parentName:"p",href:"https://openid.net/connect/"},"OpenID Connect")," based Authentication for Druid Processes using ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/pac4j/pac4j"},"pac4j")," as the underlying client library.\nThis can be used  with any authentication server that supports same e.g. ",(0,i.kt)("a",{parentName:"p",href:"https://developer.okta.com/"},"Okta"),".\nThis extension should only be used at the router node to enable a group of users in existing authentication server to interact with Druid cluster, using the ",(0,i.kt)("a",{parentName:"p",href:"/docs/operations/web-console"},"web console"),". This extension does not support JDBC client authentication."),(0,i.kt)("h2",{id:"configuration"},"Configuration"),(0,i.kt)("h3",{id:"creating-an-authenticator"},"Creating an Authenticator"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'druid.auth.authenticatorChain=["pac4j"]\ndruid.auth.authenticator.pac4j.type=pac4j\n')),(0,i.kt)("h3",{id:"properties"},"Properties"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Property"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"),(0,i.kt)("th",{parentName:"tr",align:null},"Default"),(0,i.kt)("th",{parentName:"tr",align:null},"required"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"druid.auth.pac4j.cookiePassphrase")),(0,i.kt)("td",{parentName:"tr",align:null},"passphrase for encrypting the cookies used to manage authentication session with browser. It can be provided as plaintext string or The ",(0,i.kt)("a",{parentName:"td",href:"/docs/operations/password-provider"},"Password Provider"),"."),(0,i.kt)("td",{parentName:"tr",align:null},"none"),(0,i.kt)("td",{parentName:"tr",align:null},"Yes")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"druid.auth.pac4j.readTimeout")),(0,i.kt)("td",{parentName:"tr",align:null},"Socket connect and read timeout duration used when communicating with authentication server"),(0,i.kt)("td",{parentName:"tr",align:null},"PT5S"),(0,i.kt)("td",{parentName:"tr",align:null},"No")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"druid.auth.pac4j.enableCustomSslContext")),(0,i.kt)("td",{parentName:"tr",align:null},"Whether to use custom SSLContext setup via ",(0,i.kt)("a",{parentName:"td",href:"/docs/development/extensions-core/simple-client-sslcontext"},"simple-client-sslcontext")," extension which must be added to extensions list when this property is set to true."),(0,i.kt)("td",{parentName:"tr",align:null},"false"),(0,i.kt)("td",{parentName:"tr",align:null},"No")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"druid.auth.pac4j.oidc.clientID")),(0,i.kt)("td",{parentName:"tr",align:null},"OAuth Client Application id."),(0,i.kt)("td",{parentName:"tr",align:null},"none"),(0,i.kt)("td",{parentName:"tr",align:null},"Yes")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"druid.auth.pac4j.oidc.clientSecret")),(0,i.kt)("td",{parentName:"tr",align:null},"OAuth Client Application secret. It can be provided as plaintext string or The ",(0,i.kt)("a",{parentName:"td",href:"/docs/operations/password-provider"},"Password Provider"),"."),(0,i.kt)("td",{parentName:"tr",align:null},"none"),(0,i.kt)("td",{parentName:"tr",align:null},"Yes")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"druid.auth.pac4j.oidc.discoveryURI")),(0,i.kt)("td",{parentName:"tr",align:null},"discovery URI for fetching OP metadata ",(0,i.kt)("a",{parentName:"td",href:"http://openid.net/specs/openid-connect-discovery-1_0.html"},"see this"),"."),(0,i.kt)("td",{parentName:"tr",align:null},"none"),(0,i.kt)("td",{parentName:"tr",align:null},"Yes")))))}m.isMDXComponent=!0}}]);